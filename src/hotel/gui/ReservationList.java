/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package hotel.gui;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.List;

import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

import hotel.Agenda;
import hotel.Hotel;
import hotel.Reservation;
import hotel.Room;
import hotel.util.Lang;
import hotel.util.ObservableList;
import hotel.util.Observer;

public class ReservationList extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	public ReservationList(ObservableList<Reservation> reservations) {
    	GUI.initLookAndFeel();
    	initComponents(reservations);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents(ObservableList<Reservation> reservations) {

        jScrollPane1 = new javax.swing.JScrollPane();
        TextFind = new javax.swing.JTextField();
        TableReservationList = new javax.swing.JTable();
        ButtonClose = new javax.swing.JButton();
        ButtonAdd = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(Lang.RESERVATION_LIST_TITLE.toString());

        TableReservationList.setModel(new DefaultTableModel(
            new Object [][] { },
            new String [] {Lang.RESERVATION_LIST_ID.toString(), Lang.RESERVATION_LIST_CONFIRMATION.toString(), Lang.RESERVATION_LIST_CLIENT_NAME.toString()}) {
    	
			private static final long serialVersionUID = 1L;
			Class[] types = new Class [] {Integer.class, Integer.class, Room.Category.class};

			@Override
            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
            
            @Override
            public boolean isCellEditable(int row, int column) {
            	return false;
            }
        });

        TableReservationList.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        TableColumn column = TableReservationList.getColumnModel().getColumn(0);
        TableReservationList.getColumnModel().removeColumn(column);
        
        show(reservations);
        
        reservations.AddElementAddedListener(new Observer<Reservation>() {
    			@Override
    			public void update(Reservation reservation) {
    				DefaultTableModel model = (DefaultTableModel) TableReservationList.getModel();
    				
    				model.addRow(new Object[] {reservation.getId(), reservation.getConfirmationNumber(), reservation.getClient()});
    			}
            });
            
        reservations.AddElementRemovedListener(new Observer<Reservation>() {
    			@Override
    			public void update(Reservation reservation) {
    				DefaultTableModel model = (DefaultTableModel) TableReservationList.getModel();
    				
    				for (int i = 0; i < model.getRowCount(); ++i) {
    					if (reservation.getId() == (Integer) model.getValueAt(i, 0)) {
    						model.removeRow(i);
    						break;
    					}
    				}
    			}
            });
        
        jScrollPane1.setViewportView(TableReservationList);
        TableReservationList.addMouseListener(new MouseAdapter() {
        	@Override
        	public void mouseClicked(MouseEvent event) {
                if (event.getButton() == MouseEvent.BUTTON1 && event.getClickCount() == 2) {
                	DefaultTableModel model = (DefaultTableModel) TableReservationList.getModel();
                	int rowIndex = TableReservationList.rowAtPoint(event.getPoint());
                	Reservation r = Agenda.getInstance().getReservation((Integer) model.getValueAt(rowIndex, 1));
                	
                	ReservationForm form = new ReservationForm();
                	form.update(r);
                	
                    form.setVisible(true);
                }
            }
        });

        ButtonClose.setText(Lang.RESERVATION_LIST_CLOSE.toString());
        ButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCloseActionPerformed(evt);
            }
        });
        
        ButtonAdd.setText(Lang.RESERVATION_LIST_ADD.toString());
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 577, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TextFind, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(ButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TextFind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonClose)
                    .addComponent(ButtonAdd))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Code qui permet la gestion du bouton fermer
     * @param evt
     */
    private void ButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCloseActionPerformed
    	dispose();
    }//GEN-LAST:event_ButtonCloseActionPerformed
    
    /**
     * Code qui permet la gestion du bouton ajouter 
     * @param evt
     */
    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {
    	/*
    	ReservationForm form = new ReservationForm();
        form.setVisible(true);
        */
    	
    	String query = JOptionPane.showInputDialog("Entrer vos param√®tres de recherche");
    	if (query != null) {
        	if (query.isEmpty())
        	    show(Agenda.getInstance());
        	else
        	    search(query, Agenda.getInstance());
        }
    }
    
    private void search(String query, ObservableList<Reservation> reservations) {
    	String[] operands = query.split("=");
    	DefaultTableModel model = (DefaultTableModel) TableReservationList.getModel();
    	clearTable();
    	
    	switch (operands.length) {
    	case 1:
    	    for (Reservation r : reservations) {
                if (Integer.toString(r.getConfirmationNumber()).contains(operands[0])
                        || r.getClient().getName().contains(operands[0])) {
                    model.addRow(new Object[] {r.getId(), r.getConfirmationNumber(), r.getClient()});
                }
            }
    	    break;
    	}
	    
    	if (operands[0].isEmpty()) {
    	    for (Reservation r : reservations) {
    	        model.addRow(new Object[] {r.getId(), r.getConfirmationNumber(), r.getClient()});
            }
    	}
    	if (operands[0].equals("confirmationNumber")) {
    	        
    		for (Reservation r : reservations) {
    			if (r.getConfirmationNumber() == Integer.parseInt(operands[1])) {
    	        	    model.addRow(new Object[] {r.getId(), r.getConfirmationNumber(), r.getClient()});
    			}
    		}
    	}
    }
    
    private void show(List<Reservation> reservations) {
        clearTable();
        
        for (Reservation r : reservations) {
            DefaultTableModel model = (DefaultTableModel) TableReservationList.getModel();
            model.addRow(new Object[] {r.getId(), r.getConfirmationNumber(), r.getClient()});
        }
    }
    
    private void clearTable() {
        DefaultTableModel model = (DefaultTableModel) TableReservationList.getModel();
        
        for (int i = model.getRowCount() - 1; i >= 0 ; --i)
            model.removeRow(i);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ReservationList(Agenda.getInstance()).setVisible(true);
                Agenda.getInstance().init();
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonClose;
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable TableReservationList;
    private javax.swing.JTextField TextFind;
    // End of variables declaration//GEN-END:variables
}
